<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <title>Docházka</title>
  <link rel="icon" type="image/png" href="static/logo.png">
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
  <style>
    /* ...původní css... */
    .odchod-btn { background: #ffe066; color: #8a7200; border: 2px solid #b7a100; border-radius: 10px; padding: 8px 18px; font-size: 16px; cursor: pointer; font-weight: bold; box-shadow: 0 2px 8px rgba(25,56,112,0.15); margin-left: 2px; display: none;}
    .odchod-btn.show { display: inline-block; }
    .odchod-btn:hover { background: #fff4b2; }
    .modal-odchod { background: #fff9e6; }
    .modal-odchod input { margin-bottom: 15px;}
    /* ...původní css zůstává... */
  </style>
</head>
<body>
  <div class="center-wrap">
    <h1>Docházka</h1>
    <div class="container">
      <!-- LEVÝ SLOUPEC -->
      <div class="left-column">
        <div>
          <div class="logo-container">
            <img src="static/logo.png" alt="Sportisimo Logo" class="logo">
          </div>
          <label for="datum">Datum:</label>
          <input type="date" id="datum">
        </div>
        <input id="barcode" type="text" autofocus autocomplete="off" placeholder="Skenuj ID..." />
        <button type="button" class="admin-btn" id="adminBtn">Admin</button>
        <div id="zprava" class="status"></div>
        <div id="stavZamestnancu" class="stav-zamestnancu"></div>
        <div class="action-buttons">
          <button onclick="history.back()" class="zpet-button">⬅ Zpět</button>
          <button id="exportBtn" onclick="exportovatDochazku()" class="export-button">Exportovat</button>
          <button id="deleteBtn" onclick="vymazatDochazku()" class="delete-button">Vymazat docházku</button>
          <button id="odchodBtn" class="odchod-btn">Odchod zaměstnance</button>
        </div>
      </div>
      <!-- PRAVÝ SLOUPEC -->
      <div class="right-column">
        <div class="filter-buttons">
          <button id="btnA1" class="filter-btn">A1</button>
          <button id="btnA2" class="filter-btn">A2</button>
        </div>
        <h2>Všichni zaměstnanci — <span id="countPr"></span></h2>
        <div id="zamestnanciGrid" class="zamestnanci-grid"></div>
      </div>
    </div>
  </div>

  <!-- MODÁLNÍ OKNO PRO ADMIN -->
  <div id="adminModalBg" class="modal-bg">
    <div class="modal">
      <div style="font-weight:bold; font-size:20px; margin-bottom:18px;">Režim vedoucího</div>
      <input type="password" id="adminPwd" placeholder="Zadej heslo..." />
      <br>
      <button type="button" class="modal-ok" id="adminOk">OK</button>
      <button type="button" class="modal-close" id="adminClose">Zavřít</button>
      <div id="adminMsg" style="margin-top:9px; color:#ee3b33; font-size:14px;"></div>
    </div>
  </div>

  <!-- MODÁLNÍ OKNO PRO ODCHOD -->
  <div id="odchodModalBg" class="modal-bg">
    <div class="modal modal-odchod">
      <div style="font-weight:bold; font-size:18px; margin-bottom:15px;">Odchod zaměstnance</div>
      <input type="text" id="odchodIdCard" placeholder="Zadej ID zaměstnance..."/>
      <br>
      <button type="button" class="modal-ok" id="odchodOk">Potvrdit</button>
      <button type="button" class="modal-close" id="odchodClose">Zavřít</button>
      <div id="odchodMsg" style="margin-top:8px; color:#b53c2f; font-size:14px;"></div>
    </div>
  </div>

  <script>
    let jeVedouci = false;
    const adminBtn = document.getElementById('adminBtn');
    const adminModalBg = document.getElementById('adminModalBg');
    const adminPwd = document.getElementById('adminPwd');
    const adminOk = document.getElementById('adminOk');
    const adminClose = document.getElementById('adminClose');
    const adminMsg = document.getElementById('adminMsg');
    const exportBtn = document.getElementById("exportBtn");
    const deleteBtn = document.getElementById("deleteBtn");
    const odchodBtn = document.getElementById("odchodBtn");

    function zobrazTlacitka() {
      if (jeVedouci) {
        exportBtn.classList.add('show');
        deleteBtn.classList.add('show');
        odchodBtn.classList.add('show');
      } else {
        exportBtn.classList.remove('show');
        deleteBtn.classList.remove('show');
        odchodBtn.classList.remove('show');
      }
    }

    adminBtn.addEventListener('click', function() {
      adminModalBg.classList.add('show');
      adminPwd.value = "";
      adminMsg.textContent = "";
      setTimeout(() => adminPwd.focus(), 100);
    });
    adminClose.addEventListener('click', () => adminModalBg.classList.remove('show'));
    adminPwd.addEventListener('keydown', function(e){
      if (e.key === "Enter") adminOk.click();
    });
    adminOk.addEventListener('click', function() {
      if (adminPwd.value === 'vedouci123') {
        jeVedouci = true;
        adminModalBg.classList.remove('show');
        zobrazTlacitka();
      } else {
        adminMsg.textContent = "Nesprávné heslo!";
      }
    });

    // MODAL PRO ODCHOD ZAMĚSTNANCE
    const odchodModalBg = document.getElementById('odchodModalBg');
    const odchodIdCard = document.getElementById('odchodIdCard');
    const odchodOk = document.getElementById('odchodOk');
    const odchodClose = document.getElementById('odchodClose');
    const odchodMsg = document.getElementById('odchodMsg');

    odchodBtn.addEventListener('click', function() {
      odchodModalBg.classList.add('show');
      odchodIdCard.value = '';
      odchodMsg.textContent = '';
      setTimeout(() => odchodIdCard.focus(), 100);
    });
    odchodClose.addEventListener('click', () => odchodModalBg.classList.remove('show'));
    odchodIdCard.addEventListener('keydown', function(e){
      if (e.key === "Enter") odchodOk.click();
    });
    odchodOk.addEventListener('click', function() {
      const id = odchodIdCard.value.trim();
      if (!id) {
        odchodMsg.textContent = "Zadej ID zaměstnance!";
        return;
      }
      // Vyhledat v přítomných
      const zam = pritomni.find(p => p.id_card === id && !p.cas_odchodu);
      if (!zam) {
        odchodMsg.textContent = "Zaměstnanec s tímto ID není aktuálně přítomen nebo už má odchod!";
        return;
      }
      zam.cas_odchodu = formatTime(new Date());
      ulozLocal('pritomni_' + vybraneDatum, pritomni);
      odchodModalBg.classList.remove('show');
      zobrazZamestnance();
      zpravaDiv.textContent = `${zam.jmeno} odešel a byl zapsán čas odchodu.`;
      zpravaDiv.className = "success status";
    });

    // --- DOCHÁZKA ---
    let filterA1 = true;
    let filterA2 = true;

    function parseCSV(csv) {
      const sep = csv.includes(';') ? ';' : ',';
      const lines = csv.trim().split('\n');
      const headers = lines[0].split(sep).map(h => h.trim().toLowerCase());
      return lines.slice(1).map(line => {
        const values = line.split(sep);
        let obj = {};
        headers.forEach((h, i) => { obj[h] = (values[i] || "").trim(); });
        return obj;
      });
    }

    function formatTime(date) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    }

    function ulozLocal(key, val) {
      localStorage.setItem(key, JSON.stringify(val));
    }
    function nacistLocal(key) {
      try {
        return JSON.parse(localStorage.getItem(key) || '[]');
      } catch {
        return [];
      }
    }

    let zamestnanci = [];
    let pritomni = [];
    let vybraneDatum = "";

    const btnA1 = document.getElementById("btnA1");
    const btnA2 = document.getElementById("btnA2");
    const barcodeInput = document.getElementById("barcode");
    const zpravaDiv = document.getElementById("zprava");
    const datumInput = document.getElementById("datum");
    const stavZamestnancu = document.getElementById("stavZamestnancu");
    const zamestnanciGrid = document.getElementById("zamestnanciGrid");
    const countPr = document.getElementById("countPr");

    async function nacistZamestnanceZeSouboru() {
      const ulozeni = nacistLocal('zamestnanci');
      if (Array.isArray(ulozeni) && ulozeni.length > 0) {
        zamestnanci = ulozeni;
        stavZamestnancu.textContent = "Seznam zaměstnanců načten z LocalStorage.";
        zobrazZamestnance();
        return;
      }
      stavZamestnancu.textContent = "Načítám seznam zaměstnanců…";
      try {
        const res = await fetch('zam.csv');
        if (res.ok) {
          const text = await res.text();
          zamestnanci = parseCSV(text);
          ulozLocal('zamestnanci', zamestnanci);
          stavZamestnancu.textContent = "Seznam zaměstnanců načten ze souboru.";
          zobrazZamestnance();
        } else {
          stavZamestnancu.textContent = "Soubor zam.csv nebyl nalezen!";
        }
      } catch {
        stavZamestnancu.textContent = "Nepodařilo se načíst zam.csv!";
      }
    }

    document.addEventListener("DOMContentLoaded", async () => {
      const dnes = new Date().toISOString().slice(0, 10);
      datumInput.value = dnes;
      vybraneDatum = dnes;
      pritomni = nacistLocal('pritomni_' + vybraneDatum);

      const ulozSmeny = nacistLocal('aktivniSmeny');
      if (Array.isArray(ulozSmeny) && ulozSmeny.length > 0) {
        filterA1 = ulozSmeny.includes('A1');
        filterA2 = ulozSmeny.includes('A2');
      }
      updateFilterButtons();

      await nacistZamestnanceZeSouboru();
      zobrazTlacitka();
    });

    datumInput.addEventListener("change", function() {
      vybraneDatum = this.value;
      pritomni = nacistLocal('pritomni_' + vybraneDatum);
      zobrazZamestnance();
      zpravaDiv.textContent = "";
    });

    barcodeInput.addEventListener("keydown", function(e) {
      if (e.key === "Enter") {
        if (zamestnanci.length === 0) {
          zpravaDiv.textContent = "Seznam zaměstnanců se načítá, počkejte prosím.";
          zpravaDiv.className = "error status";
          return;
        }
        const id_card = barcodeInput.value.trim();
        if (!id_card) {
          zpravaDiv.textContent = "Nezadal/a jste ID!";
          zpravaDiv.className = "error status";
          return;
        }
        const zam = zamestnanci.find(z => z.id_card === id_card);
        if (!zam) {
          zpravaDiv.textContent = "Zaměstnanec nenalezen!";
          zpravaDiv.className = "error status";
        } else if (pritomni.some(p => p.id_card === id_card && !p.cas_odchodu)) {
          zpravaDiv.textContent = zam.jmeno + " už je zapsán!";
          zpravaDiv.className = "error status";
        } else {
          const ted = new Date();
          const casStr = formatTime(ted);
          const zapis = {
            os_cislo: zam.os_cislo,
            jmeno: zam.jmeno,
            pozice: zam.pozice,
            smena: zam.smena,
            prac_pomer: zam.prac_pomer,
            id_card: zam.id_card,
            cas_prichodu: casStr,
            funkce: zam.funkce,
            cas_odchodu: "" // Nově přidané pole
          };
          pritomni.push(zapis);
          ulozLocal('pritomni_' + vybraneDatum, pritomni);
          zobrazZamestnance();
          zpravaDiv.textContent = `${zam.jmeno} (${zam.smena}${zam.funkce ? ', ' + zam.funkce : ''}, ${zam.prac_pomer || ''}) zapsán v ${casStr}`;
          zpravaDiv.className = "success status";
        }
        barcodeInput.value = "";
      }
    });

    function updateFilterButtons() {
      if (filterA1) {
        btnA1.classList.add("active");
        btnA1.classList.remove("inactive");
      } else {
        btnA1.classList.add("inactive");
        btnA1.classList.remove("active");
      }
      btnA1.disabled = (filterA2 === false);

      if (filterA2) {
        btnA2.classList.add("active");
        btnA2.classList.remove("inactive");
      } else {
        btnA2.classList.add("inactive");
        btnA2.classList.remove("active");
      }
      btnA2.disabled = (filterA1 === false);

      ulozLocal('aktivniSmeny', [
        ...(filterA1 ? ['A1'] : []),
        ...(filterA2 ? ['A2'] : [])
      ]);
    }

    btnA1.addEventListener("click", function() {
      if (filterA1 && filterA2) {
        filterA1 = false;
      } else if (!filterA1 && filterA2) {
        filterA1 = true;
      }
      updateFilterButtons();
      zobrazZamestnance();
    });

    btnA2.addEventListener("click", function() {
      if (filterA1 && filterA2) {
        filterA2 = false;
      } else if (filterA1 && !filterA2) {
        filterA2 = true;
      }
      updateFilterButtons();
      zobrazZamestnance();
    });

    function zobrazZamestnance() {
      if (zamestnanci.length === 0) {
        zamestnanciGrid.innerHTML = "<div style='grid-column:1/-1; text-align:center; color:#fff;'>Seznam zaměstnanců je prázdný nebo se načítá.</div>";
        countPr.innerHTML = `přítomní: <strong>0</strong> (<strong>0 KMEN</strong> / <strong>0 AGENT</strong>) / <strong>0</strong>, <span style="color:#ee3b33">nepřítomní: <strong>0</strong></span>`;
        return;
      }

      const vybraneSmeny = [];
      if (filterA1) vybraneSmeny.push('A1');
      if (filterA2) vybraneSmeny.push('A2');

      let zamList = zamestnanci
        .filter(z => vybraneSmeny.includes(z.smena))
        .sort((a, b) => a.jmeno.localeCompare(b.jmeno, 'cs'));

      let gridHTML = "";
      let pocetPritomnych = 0;
      let pocetKmen = 0;
      let pocetAgent = 0;
      zamList.forEach(zam => {
        const pr = pritomni.find(p => p.id_card === zam.id_card && !p.cas_odchodu);
        if (pr) {
          pocetPritomnych++;
          if (zam.prac_pomer === "AGENT") pocetAgent++;
          else pocetKmen++;
        }
        let cellClass = pr ? 'pritomen-cell' : '';
        if (pr && zam.prac_pomer === "AGENT") cellClass += ' agent';
        gridHTML += `<div class="zamestnanec-cell${cellClass ? ' ' + cellClass : ''}">
          <div>${zam.jmeno}</div>
          <div style="font-size:11px; opacity:0.8;">${zam.smena || ""}${zam.funkce ? ', ' + zam.funkce : ''}</div>
          <div style="font-size:11px; opacity:0.6;">${zam.prac_pomer || ""}</div>
        </div>`;
      });

      const nepocet = zamList.length - pocetPritomnych;
      countPr.innerHTML = `přítomní: <strong>${pocetPritomnych}</strong> (<strong>${pocetKmen} KMEN</strong> / <strong>${pocetAgent} AGENT</strong>) / <strong>${zamList.length}</strong>, <span style="color:#ee3b33">nepřítomní: <strong>${nepocet}</strong></span>`;
      zamestnanciGrid.innerHTML = gridHTML;
    }

    function vymazatDochazku() {
      if (confirm("Opravdu chceš smazat docházku pro toto datum?")) {
        pritomni = [];
        ulozLocal('pritomni_' + vybraneDatum, pritomni);
        zobrazZamestnance();
        zpravaDiv.textContent = "Docházka vymazána!";
        zpravaDiv.className = "success status";
      }
    }

    function exportovatDochazku() {
      const vybraneSmeny = [];
      if (filterA1) vybraneSmeny.push('A1');
      if (filterA2) vybraneSmeny.push('A2');

      let exportList = zamestnanci
        .filter(z => vybraneSmeny.includes(z.smena))
        .sort((a, b) => a.jmeno.localeCompare(b.jmeno, 'cs'));

      let exportData = exportList.map(zam => {
        let pr = pritomni.find(p => p.id_card === zam.id_card);
        return [
          zam.os_cislo,
          zam.jmeno,
          zam.pozice,
          zam.smena,
          zam.funkce,
          zam.prac_pomer,
          zam.id_card,
          pr ? pr.cas_prichodu : "",
          pr && pr.cas_odchodu ? pr.cas_odchodu : "",
          pr ? (pr.cas_odchodu ? "ne" : "ano") : "ne"
        ];
      });

      let headers = [
        "Os. číslo",
        "Jméno",
        "Pozice",
        "Směna",
        "Funkce",
        "Pracovní poměr",
        "ID_card",
        "Čas příchodu",
        "Čas odchodu",
        "Přítomen"
      ];

      let csvContent =
        headers.join(";") + "\n" +
        exportData.map(row => row.map(val => `"${val}"`).join(";")).join("\n");

      // BOM pro kompatibilitu s Excel
      const BOM = "\uFEFF";
      let blob = new Blob([BOM + csvContent], { type: "text/csv;charset=utf-8;" });
      let url = URL.createObjectURL(blob);
      let a = document.createElement('a');
      a.href = url;
      a.download = "dochazka_" + vybraneDatum + ".csv";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  </script>
</body>
</html>
